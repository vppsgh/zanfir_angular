{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts.AppComponent.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.module.ts","webpack:///src/app/auth.service.ts","webpack:///src/app/home.component.ts.HomeComponent.html","webpack:///src/app/home.component.ts","webpack:///src/app/login.component.ts.LoginComponent.html","webpack:///src/app/login.component.ts","webpack:///src/app/material-module.ts","webpack:///src/app/messages.component.ts.MessagesComponent.html","webpack:///src/app/messages.component.ts","webpack:///src/app/nav.component.ts.NavComponent.html","webpack:///src/app/nav.component.ts","webpack:///src/app/new-message.component.ts.NewMessageComponent.html","webpack:///src/app/new-message.component.ts","webpack:///src/app/register.component.html","webpack:///src/app/register.component.ts","webpack:///src/app/web.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","AppComponent","path","component","AppModule","AuthService","http","router","BASE_URL","NAME_KEY","TOKEN_KEY","loginData","console","log","email","password","post","subscribe","res","authenticate","user","confirmPassword","localStorage","removeItem","authResponse","token","setItem","firstName","navigate","getItem","HomeComponent","LoginComponent","auth","login","MaterialModule","MessagesComponent","webService","route","name","snapshot","params","getMessages","NavComponent","logout","isAuthenticated","NewMessageComponent","message","owner","text","postMessage","RegisterComponent","fb","form","group","required","lastName","emailValid","validator","matchingFields","errors","register","value","control","controls","invalid","touched","field1","field2","mismatchedFields","regex","test","invalidEmail","WebService","sb","messageStore","messageSubject","messages","asObservable","get","response","next","error","handleError","requestOptions","responseType","data","push","open","duration","environment","production","catch","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","\n    <nav></nav>\n    <router-outlet></router-outlet>\n  ","import { Component } from '@angular/core';\r\nimport { NavComponent } from './nav.component';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  template: `\r\n    <nav></nav>\r\n    <router-outlet></router-outlet>\r\n  `,\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n// import { MaterialModule } from './material-module';\r\n// import { MatSliderModule } from '@angular/material/slider';\r\n// import { MatButtonModule } from '@angular/material/button';\r\n\r\nimport { MaterialModule } from './material-module';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { MessagesComponent } from './messages.component';\r\nimport { WebService } from './web.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { NewMessageComponent } from './new-message.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NavComponent } from './nav.component';\r\nimport { HomeComponent } from './home.component';\r\nimport { RegisterComponent } from './register.component';\r\nimport { AuthService } from './auth.service';\r\nimport { LoginComponent } from './login.component';\r\n\r\nvar routes = [{\r\n  path: '',\r\n  component: HomeComponent\r\n},\r\n{\r\n  path: 'messages',\r\n  component: MessagesComponent\r\n},\r\n{\r\n  path: 'messages/:name',\r\n  component: MessagesComponent\r\n},\r\n{\r\n  path: 'register',\r\n  component: RegisterComponent\r\n},\r\n{\r\n  path: 'login',\r\n  component: LoginComponent\r\n}];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    MessagesComponent,\r\n    NewMessageComponent,\r\n    NavComponent,\r\n    HomeComponent,\r\n    RegisterComponent,\r\n    LoginComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MaterialModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forRoot(routes)\r\n  ],\r\n  providers: [WebService, AuthService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n\r\n    BASE_URL = 'http://localhost:63145/auth';\r\n    NAME_KEY = 'name';\r\n    TOKEN_KEY = 'token';\r\n\r\n    constructor(private http: HttpClient, private router: Router) {}\r\n\r\n    get name() {\r\n        return localStorage.getItem(this.NAME_KEY);\r\n    }\r\n\r\n    get isAuthenticated() {\r\n        return !!localStorage.getItem(this.TOKEN_KEY);\r\n    }\r\n\r\n    login(loginData) {\r\n        console.log(\"AA \" + loginData.email + \" BB \" + loginData.password);\r\n        this.http.post<any>(this.BASE_URL + '/login', loginData).subscribe( res => {\r\n            this.authenticate(res);\r\n        });\r\n    }\r\n\r\n    register(user) {\r\n        delete user.confirmPassword;\r\n        this.http.post<any>(this.BASE_URL + '/register', user).subscribe( res => {\r\n            this.authenticate(res);\r\n        });\r\n    }\r\n    logout() {\r\n        localStorage.removeItem(this.NAME_KEY);\r\n        localStorage.removeItem(this.TOKEN_KEY);\r\n    }\r\n\r\n    authenticate(res) {\r\n        var authResponse = res;\r\n        if (!authResponse.token)\r\n            return;\r\n\r\n        localStorage.setItem(this.TOKEN_KEY, authResponse.token);\r\n        localStorage.setItem(this.NAME_KEY, authResponse.firstName);\r\n        this.router.navigate(['/']);\r\n    }\r\n}\r\n\r\n\r\n","\n    <new-message></new-message>\n    <messages></messages>\n  ","import { Component } from '@angular/core';\r\nimport { NavComponent } from './nav.component';\r\n\r\n@Component({\r\n  selector: 'home',\r\n  template: `\r\n    <new-message></new-message>\r\n    <messages></messages>\r\n  `,\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class HomeComponent {\r\n\r\n}","\n    <mat-card>\n        <form>\n            <mat-form-field>\n                <input matInput [(ngModel)]=\"this.loginData.email\" name=\"email1\" placeholder=\"Email\" type=\"email\">\n            </mat-form-field>\n            <br>\n            <mat-form-field>\n                <input matInput [(ngModel)]=\"this.loginData.password\" name=\"password1\" placeholder=\"Password\" type=\"password\">\n            </mat-form-field>\n            <br>\n            <button mat-raised-button color=\"primary\" (click)=\"login()\">Login</button>\n        </form>    \n    </mat-card>\n    ","import { Component } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Component({\r\n    selector: 'login',\r\n    template: `\r\n    <mat-card>\r\n        <form>\r\n            <mat-form-field>\r\n                <input matInput [(ngModel)]=\"this.loginData.email\" name=\"email1\" placeholder=\"Email\" type=\"email\">\r\n            </mat-form-field>\r\n            <br>\r\n            <mat-form-field>\r\n                <input matInput [(ngModel)]=\"this.loginData.password\" name=\"password1\" placeholder=\"Password\" type=\"password\">\r\n            </mat-form-field>\r\n            <br>\r\n            <button mat-raised-button color=\"primary\" (click)=\"login()\">Login</button>\r\n        </form>    \r\n    </mat-card>\r\n    `,\r\n    styles: [`\r\n    .error {\r\n        background-color: #fff0f0\r\n    }\r\n  `]\r\n})\r\nexport class LoginComponent {\r\n    form;\r\n\r\n    constructor( private auth: AuthService) {}\r\n\r\n    loginData = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n\r\n    login() {\r\n        console.log(this.loginData);\r\n        this.auth.login(this.loginData);\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {A11yModule} from '@angular/cdk/a11y';\r\nimport {DragDropModule} from '@angular/cdk/drag-drop';\r\nimport {PortalModule} from '@angular/cdk/portal';\r\nimport {ScrollingModule} from '@angular/cdk/scrolling';\r\nimport {CdkStepperModule} from '@angular/cdk/stepper';\r\nimport {CdkTableModule} from '@angular/cdk/table';\r\nimport {CdkTreeModule} from '@angular/cdk/tree';\r\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\r\nimport {MatBadgeModule} from '@angular/material/badge';\r\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatChipsModule} from '@angular/material/chips';\r\nimport {MatStepperModule} from '@angular/material/stepper';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport {MatGridListModule} from '@angular/material/grid-list';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatListModule} from '@angular/material/list';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\r\nimport {MatPaginatorModule} from '@angular/material/paginator';\r\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\r\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\r\nimport {MatRadioModule} from '@angular/material/radio';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {MatSidenavModule} from '@angular/material/sidenav';\r\nimport {MatSliderModule} from '@angular/material/slider';\r\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\r\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\r\nimport {MatSortModule} from '@angular/material/sort';\r\nimport {MatTableModule} from '@angular/material/table';\r\nimport {MatTabsModule, MatTabLink} from '@angular/material/tabs';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatTooltipModule} from '@angular/material/tooltip';\r\nimport {MatTreeModule} from '@angular/material/tree';\r\n\r\n@NgModule({\r\n    exports: [\r\n        A11yModule,\r\n        CdkStepperModule,\r\n        CdkTableModule,\r\n        CdkTreeModule,\r\n        DragDropModule,\r\n        MatAutocompleteModule,\r\n        MatBadgeModule,\r\n        MatBottomSheetModule,\r\n        MatButtonModule,\r\n        MatButtonToggleModule,\r\n        MatCardModule,\r\n        MatCheckboxModule,\r\n        MatChipsModule,\r\n        MatStepperModule,\r\n        MatDatepickerModule,\r\n        MatDialogModule,\r\n        MatDividerModule,\r\n        MatExpansionModule,\r\n        MatGridListModule,\r\n        MatIconModule,\r\n        MatInputModule,\r\n        MatListModule,\r\n        MatMenuModule,\r\n        MatNativeDateModule,\r\n        MatPaginatorModule,\r\n        MatProgressBarModule,\r\n        MatProgressSpinnerModule,\r\n        MatRadioModule,\r\n        MatRippleModule,\r\n        MatSelectModule,\r\n        MatSidenavModule,\r\n        MatSliderModule,\r\n        MatSlideToggleModule,\r\n        MatSnackBarModule,\r\n        MatSortModule,\r\n        MatTableModule,\r\n        MatTabsModule,\r\n        MatToolbarModule,\r\n        MatTooltipModule,\r\n        MatTreeModule,\r\n        PortalModule,\r\n        ScrollingModule,\r\n    ]\r\n})\r\nexport class MaterialModule {}","\n        <div *ngFor=\"let message of webService.messages | async\">\n            <mat-card class=\"card\">\n                <mat-card-title [routerLink]=\"['/messages', message.owner]\" style=\"cursor:pointer\">{{message.owner}}</mat-card-title>\n                <mat-card-content>\n                    {{message.text}}\n                </mat-card-content>\n            </mat-card>\n        </div>\n    ","import { Component } from '@angular/core'\r\nimport { WebService } from './web.service'\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'messages',\r\n    template: `\r\n        <div *ngFor=\"let message of webService.messages | async\">\r\n            <mat-card class=\"card\">\r\n                <mat-card-title [routerLink]=\"['/messages', message.owner]\" style=\"cursor:pointer\">{{message.owner}}</mat-card-title>\r\n                <mat-card-content>\r\n                    {{message.text}}\r\n                </mat-card-content>\r\n            </mat-card>\r\n        </div>\r\n    `\r\n})\r\n\r\nexport class MessagesComponent {\r\n\r\n    constructor( public webService : WebService, private route: ActivatedRoute ) {\r\n    }\r\n    ngOnInit() {\r\n        var name = this.route.snapshot.params.name;\r\n        this.webService.getMessages(name);\r\n        // this.webService.messages.subscribe(messages => {\r\n        //     this.messages = messages;\r\n        // })\r\n        \r\n    }\r\n}\r\n","\n        <mat-toolbar color=\"primary\">\n            <button mat-button routerLink=\"/\" >Message board</button>\n            <button mat-button routerLink=\"/messages\" >Messages</button>\n            <span style=\"flex: 1 1 auto\"></span>\n            <button *ngIf=\"!isAuthenticated\" mat-button routerLink=\"/login\" >Login</button>\n            <button *ngIf=\"!isAuthenticated\" mat-button routerLink=\"/register\" >Register</button>\n            <button *ngIf=\"isAuthenticated\" mat-button routerLink=\"/\" >Welcome {{usrName}}</button>\n            <button *ngIf=\"isAuthenticated\" mat-button (click)=\"logout()\">Logout</button>\n        </mat-toolbar>\n    ","import { Component } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Component({\r\n    selector: 'nav',\r\n    template: `\r\n        <mat-toolbar color=\"primary\">\r\n            <button mat-button routerLink=\"/\" >Message board</button>\r\n            <button mat-button routerLink=\"/messages\" >Messages</button>\r\n            <span style=\"flex: 1 1 auto\"></span>\r\n            <button *ngIf=\"!isAuthenticated\" mat-button routerLink=\"/login\" >Login</button>\r\n            <button *ngIf=\"!isAuthenticated\" mat-button routerLink=\"/register\" >Register</button>\r\n            <button *ngIf=\"isAuthenticated\" mat-button routerLink=\"/\" >Welcome {{usrName}}</button>\r\n            <button *ngIf=\"isAuthenticated\" mat-button (click)=\"logout()\">Logout</button>\r\n        </mat-toolbar>\r\n    `\r\n})\r\nexport class NavComponent {\r\n\r\n    constructor( private auth: AuthService) {}\r\n\r\n    get usrName() {return this.auth.name;}\r\n    get isAuthenticated() {return this.auth.isAuthenticated;}\r\n\r\n    logout() {\r\n        this.auth.logout();\r\n    }\r\n}\r\n","\n        <mat-card class=\"card\">\n        <mat-card-content>\n            <mat-form-field>\n                <input [(ngModel)]=\"message.owner\" matInput placeholder=\"Name\">\n            </mat-form-field>\n            <br>\n            <mat-form-field>\n                <textarea [(ngModel)]=\"message.text\" matInput placeholder=\"Message\"></textarea>\n            </mat-form-field>\n            <mat-card-actions>\n                <button (click)=\"post()\" mat-button color=\"primary\">POST</button>\n            </mat-card-actions>\n        </mat-card-content>\n        </mat-card>\n    ","import { Component } from '@angular/core'\r\nimport { WebService } from './web.service'\r\n// import { MessagesComponent } from './messages.component';\r\n\r\n@Component({\r\n    selector: 'new-message',\r\n    template: `\r\n        <mat-card class=\"card\">\r\n        <mat-card-content>\r\n            <mat-form-field>\r\n                <input [(ngModel)]=\"message.owner\" matInput placeholder=\"Name\">\r\n            </mat-form-field>\r\n            <br>\r\n            <mat-form-field>\r\n                <textarea [(ngModel)]=\"message.text\" matInput placeholder=\"Message\"></textarea>\r\n            </mat-form-field>\r\n            <mat-card-actions>\r\n                <button (click)=\"post()\" mat-button color=\"primary\">POST</button>\r\n            </mat-card-actions>\r\n        </mat-card-content>\r\n        </mat-card>\r\n    `\r\n})\r\n\r\nexport class NewMessageComponent {\r\n\r\n    constructor(private webService : WebService) {}\r\n\r\n    message = {\r\n        owner : \"\",\r\n        text : \"\"\r\n    }\r\n\r\n    post() {\r\n            console.log(this.message);\r\n            this.webService.postMessage(this.message);\r\n    }\r\n}","<mat-card>\r\n    <form [formGroup] = \"form\" (ngSubmit)=\"onSubmit()\">\r\n        <mat-form-field>\r\n            <input style=\"width:350px\" [ngClass]=\"{'error' : isValid('firstName')}\" matInput placeholder=\"First Name\" formControlName=\"firstName\">\r\n        </mat-form-field>\r\n        <br>\r\n        <mat-form-field>\r\n            <input style=\"width:350px\" [ngClass]=\"{'error' : isValid('lastName')}\" matInput placeholder=\"Last Name\" formControlName=\"lastName\">\r\n        </mat-form-field>\r\n        <br>\r\n        <mat-form-field>\r\n            <input style=\"width:350px\" [ngClass]=\"{'error' : isValid('email')}\" type=\"email\" ngModel email matInput placeholder=\"Email\" formControlName=\"email\">\r\n        </mat-form-field>\r\n        <br>\r\n        <mat-form-field>\r\n            <input style=\"width:350px\" [ngClass]=\"{'error' : isValid('password')}\" type=\"password\" matInput placeholder=\"Password\" formControlName=\"password\">\r\n        </mat-form-field>\r\n        <br>\r\n        <mat-form-field>\r\n            <input style=\"width:350px\" [ngClass]=\"{'error' : isValid('confirmPassword')}\" type=\"password\" matInput placeholder=\"Confirm Password\" formControlName=\"confirmPassword\">\r\n        </mat-form-field>\r\n        <br>\r\n        <span *ngIf=\"form.errors?.mismatchedFields\">Passwords do not match</span>\r\n        <br>\r\n        <button mat-raised-button color=\"primary\">Register</button>\r\n    </form>    \r\n</mat-card>\r\n","import { Component } from '@angular/core';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { AuthService } from './auth.service';\r\n\r\n@Component({\r\n  selector: 'register',\r\n  templateUrl: 'register.component.html',\r\n  styles: [`\r\n    .error {\r\n        background-color: #fff0f0\r\n    }\r\n  `]\r\n})\r\nexport class RegisterComponent {\r\n    form;\r\n\r\n    constructor(private fb: FormBuilder, private auth: AuthService) {\r\n        this.form = fb.group({\r\n            firstName: ['', Validators.required],\r\n            lastName: ['', Validators.required],\r\n            email: ['', [Validators.required, emailValid()]],\r\n            password: ['', Validators.required],\r\n            confirmPassword: ['', Validators.required]\r\n        }, {validator: matchingFields('password', 'confirmPassword')})\r\n    }\r\n\r\n    onSubmit() {\r\n        console.log(this.form.errors);\r\n        this.auth.register(this.form.value);\r\n    }\r\n    isValid(control) {\r\n        return this.form.controls[control].invalid && this.form.controls[control].touched;\r\n    }\r\n}\r\n\r\nfunction matchingFields(field1, field2) {\r\n    return form => {\r\n        if (form.controls[field1].value !== form.controls[field2].value)\r\n            return { mismatchedFields: true}\r\n    }\r\n}\r\n\r\nfunction emailValid() {\r\n    return control => {\r\n        var regex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n\r\n        return regex.test(control.value) ? null : { invalidEmail: true}\r\n    }\r\n}\r\n","\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport {MatSnackBar} from '@angular/material/snack-bar';\r\n// import 'rxjs/add/operator/toPromise';\r\nimport { Subject } from 'rxjs';\r\n\r\n\r\n@Injectable()\r\nexport class WebService {\r\n    BASE_URL = 'http://localhost:63145/api';\r\n\r\n    private messageStore = [];\r\n\r\n    private messageSubject = new Subject();\r\n\r\n    messages = this.messageSubject.asObservable();\r\n\r\n    constructor(private http: HttpClient, private sb : MatSnackBar) {\r\n        // this.getMessages();\r\n    }\r\n\r\n    getMessages(user) {\r\n            user = (user) ? '/' + user : '';\r\n            this.http.get<any>(this.BASE_URL + '/messages' + user)\r\n            .subscribe(\r\n                response => {\r\n                    console.log(response);\r\n                    this.messageStore = response;\r\n                    this.messageSubject.next(this.messageStore);\r\n                }, error => { \r\n                    this.handleError(\"Unable to get messages\");\r\n                }\r\n            )\r\n        \r\n    }\r\n\r\n    postMessage(message) {\r\n\r\n        const requestOptions: Object = {\r\n            responseType: 'text'\r\n        }\r\n        this.http.post<any>(this.BASE_URL + '/messages', message)\r\n            .subscribe(\r\n                (data) => {\r\n                this.messageStore.push(data);\r\n                this.messageSubject.next(this.messageStore);\r\n                },\r\n                (error) => { \r\n                    this.handleError(\"Unable to post message\");\r\n                }\r\n            )\r\n    }\r\n\r\n    private handleError(error) {\r\n        console.error(error);\r\n        this.sb.open(\"Unable to get message\", 'close', {duration: 2000});\r\n    }\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}